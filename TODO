- Query: support batch sizes in queries.

Database Engines
----------------
- Database: support native Sqlite on Android

General
-------
- Exceptions: go over all exceptions and create specific exceptions
- Exceptions: unify SQLExceptions coming from the DB (unique constraints, etc.)
- Name: think of a better name than norm?
- Documentation and examples
- Unit tests

Mapping
-------
- Mapping validations: if two children have the same column name we need to make sure they have
  the same column type somehow. Currently we have sort of a feature where two adjacent children
  can share the same column.

Migrations
----------
- Migrations: provide Java type column constructors (eg. builder.boolean, etc.) so developer will
  not have to make the conversion to DB-specific types in his head.
- Migrations: instead of relying on the stupid "database version" (and Android's stupid "upgrade")
  use our own migrations table like Rails.
- Migrations: provide convenience function with an AlterTableBuilder that you first define the
  existing table structure, and then do dropColumn, renameColumn, etc.
- Migrations: support modify (alter++) table (add, delete and change column types, etc.)
  - do SELECT * FROM SQL_MASTER - there's the full table sql. 
    The main issue is that we need to parse it so we can get the list of columns, their constraints
    and the table constraints as well.
  - read table index definitions (pragma index_info table-name)
  - read foreign key indexes (pragma foreign_keys table-name) (?)
  - calculate the diff with the user requested changes
  - create a new table called table-name-tmp
  - disable foreign key checks
  - we may need to remove the foreign keys in other tables and then recreate them here
  - do select from the prev table to the new table
  - delete old table
  - rename new table
  - vaccum?
- Migrations: support foreign keys (?)
- Migrations: support CHECK clause in DDL (?)
- Docs: explain how to do alter table (rename old table, create new table, copy and drop old)