- Query: support batch sizes in queries.

SELECT $Foo FROM $Foo.table WHERE $Foo.col1 > ? AND $Foo.col2 < 100 OR $Foo.attr.col3 LIKE ?

issues to be delt with:
- object identity.
  - what defines an object? its primary key if it has one, otherwise _all_ the columns mapped.
  - why needed? 
    - to do insertOrUpdate (e.g. save()).
    - to cache objects in a transaction (or between transactions/threads). very relevant for android
      since a single process accesses the DB, so a cache can save reads/writes to the DB.
  - requires a generic query/insert/update/delete mechanism
- implicit saving, i.e. dirty objects.
  - unless the fields have getter/setter that sets the dirty bit there's no way to determine if the
    object is dirty other than to keep a copy of it and compare its fields
- query/insert/update/delete
- relationships (belongs to, has a, many-to-many)
  - if we'll fetch a relationship using a JOIN, our current entity mapper class is still okay because
    we can say the column name is "table_x.col1"
  - if we'll want to set proxies for collections or one-to-one relationships, we'll have to extend
    entity mapper so it'll put these collections.
- custom queries
- partial queries (get only part of the object)
- aggregate functions (group by, sum, etc.)

so we have a multi-layered architecture:
- base: connection/db abstraction (where possible). classes: Database, DataRow , Cursor, Statement
  can be used with jdbc and android's native sqlite. does trivial mapping of java types to db types.
- entity mapper: generic way to map a DataRow into an object and vice-versa.
 
===================================================================================================
General
-------
- Exceptions: go over all exceptions and create specific exceptions
- Name: think of a better name than norm?
- Documentation and examples
- Unit tests

Mapping
-------
- Mapping validations: if two children have the same column name we need to make sure they have
  the same column type somehow. Currently we have sort of a feature where two adjacent children
  can share the same column.

Migrations
----------
- Migrations: provide Java type column constructors (eg. builder.boolean, etc.) so developer will
  not have to make the conversion to DB-specific types in his head.
  - We can make layer on top of the existing builders that reads the object mapping and creates
    table definitions. We can then also make it generate code so it'll be saved between model 
    changes.
- Migrations: instead of relying on the stupid "database version" (and Android's stupid "upgrade")
  use our own migrations table like Rails.
- Migrations: provide convenience function with an AlterTableBuilder that you first define the
  existing table structure, and then do dropColumn, renameColumn, etc.
- Migrations: support modify (alter++) table (add, delete and change column types, etc.)
  - do SELECT * FROM SQL_MASTER - there's the full table sql. 
    The main issue is that we need to parse it so we can get the list of columns, their constraints
    and the table constraints as well.
  - read table index definitions (pragma index_info table-name)
  - read foreign key indexes (pragma foreign_keys table-name) (?)
  - calculate the diff with the user requested changes
  - create a new table called table-name-tmp
  - disable foreign key checks
  - we may need to remove the foreign keys in other tables and then recreate them here
  - do select from the prev table to the new table
  - delete old table
  - rename new table
  - vaccum?
- Migrations: support foreign keys (?)
- Migrations: support CHECK clause in DDL (?)
- Docs: explain how to do alter table (rename old table, create new table, copy and drop old)